@page "/edit-application-user/{Id}"
@using TrainsMauiHybrid.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject DiplomnyProektService DiplomnyProektService
@attribute [Authorize]

<RadzenRow>
    <RadzenColumn SizeMD="12">
        <RadzenTemplateForm TItem="TrainsMauiHybrid.Models.ApplicationUser" Data="@user" Visible="@(user != null)" Submit="@FormSubmit">
            <RadzenAlert Title="Cannot update user" Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">@error</RadzenAlert>

            <RadzenStack style="margin-bottom: 1rem;">
                <RadzenFormField Text="User name" Variant="Variant.Filled">
                    <ChildContent>
                        <RadzenTextBox Disabled="true" style="width: 100%" @bind-Value="@(user.UserName)" Name="UserName" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Email" Variant="Variant.Filled">
                    <ChildContent>
                        <RadzenTextBox style="width: 100%" @bind-Value="@(user.Email)" Name="Email" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Roles" Variant="Variant.Filled">
                    <ChildContent>
                        <RadzenDropDown Data="@roles" Multiple="true" style="width: 100%" TextProperty="Name" @bind-Value="@(userRoles)" ValueProperty="Id" Name="Roles" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Password" Variant="Variant.Filled">
                    <ChildContent>
                        <RadzenPassword @bind-Value="@(user.Password)" style="display: block; width: 100%" Name="Password" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Password" Text="Password is required" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Confirm Password" Variant="Variant.Filled">
                    <ChildContent>
                        <RadzenPassword style="display: block; width: 100%" @bind-Value="@(user.ConfirmPassword)" Name="ConfirmPassword" />
                    </ChildContent>
                    <Helper>
                        <RadzenCompareValidator Text="Passwords must match" Component="ConfirmPassword" Value="@user.Password" />
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Click="@CancelClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>
</RadzenRow>
@code {

    protected IEnumerable<TrainsMauiHybrid.Models.ApplicationRole> roles;
    protected TrainsMauiHybrid.Models.ApplicationUser user;
    protected IEnumerable<string> userRoles;
    protected string error;
    protected bool errorVisible;

    [Parameter]
    public string Id { get; set; }

    [Inject]
    protected SecurityService Security { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await Security.GetUserById($"{Id}");

        userRoles = user.Roles.Select(role => role.Id);

        roles = await Security.GetRoles();
    }

    protected async Task FormSubmit(TrainsMauiHybrid.Models.ApplicationUser user)
    {
        try
        {
            user.Roles = roles.Where(role => userRoles.Contains(role.Id)).ToList();
            await Security.UpdateUser($"{Id}", user);
            DialogService.Close(null);
        }
        catch (Exception ex)
        {
            errorVisible = true;
            error = ex.Message;
        }
    }

    protected async Task CancelClick()
    {
        DialogService.Close(null);
    }

}