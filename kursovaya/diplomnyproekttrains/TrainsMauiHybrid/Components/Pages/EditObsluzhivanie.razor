@page "/edit-obsluzhivanie"
@using TrainsMauiHybrid.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject DiplomnyProektService DiplomnyProektService

<PageTitle>Edit Obsluzhivanie</PageTitle>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Obsluzhivanie</RadzenAlert>
        <RadzenTemplateForm TItem="TrainsMauiHybrid.Models.Obsluzhivanie" Data="@obsluzhivanie" Visible="@(obsluzhivanie != null)" Submit="@FormSubmit">
          <RadzenStack>
            <RadzenFormField Text="Nomer Obsluzhivania" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@obsluzhivanie.NomerObsluzhivania" Name="NomerObsluzhivania" />
                  </ChildContent>    
                  <Helper>
                    <RadzenRequiredValidator Component="NomerObsluzhivania" Text="NomerObsluzhivania is required" />
                  </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Train" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenDropDownDataGrid Data="@trainsForModelTrainKey" TextProperty="Model_Sostava_Vagonov" ValueProperty="NumVagona" AllowClear=true
                          style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Model_TrainKey" Name="Model_TrainKey"
                           />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Data Poslednego Obsluzhivania" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Data_Poslednego_Obsluzhivania" Name="Data_Poslednego_Obsluzhivania" />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Ingener Obsluzhivania" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Ingener_Obsluzhivania" Name="Ingener_Obsluzhivania" />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Problemi Sostava" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Problemi_Sostava" Name="Problemi_Sostava" />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Data Sledueschego Obsluzivania" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Data_Sledueschego_Obsluzivania" Name="Data_Sledueschego_Obsluzivania" />
              </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Goden K Doroge" Variant="Variant.Filled">
                  <ChildContent>
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@obsluzhivanie.Goden_K_Doroge" Name="Goden_K_Doroge" />
              </ChildContent>
            </RadzenFormField>
          </RadzenStack>
          <RadzenStack style="margin-top:1rem;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    [Parameter]
    public long NomerObsluzhivania { get; set; }

    protected override async Task OnInitializedAsync()
    {
        obsluzhivanie = await DiplomnyProektService.GetObsluzhivanieByNomerObsluzhivania(NomerObsluzhivania);

        trainsForModelTrainKey = await DiplomnyProektService.GetTrains();
    }
    protected bool errorVisible;
    protected TrainsMauiHybrid.Models.Obsluzhivanie obsluzhivanie;

    protected IEnumerable<TrainsMauiHybrid.Models.Train> trainsForModelTrainKey;

    protected async Task FormSubmit()
    {
        try
        {
            await DiplomnyProektService.UpdateObsluzhivanie(NomerObsluzhivania, obsluzhivanie);
            DialogService.Close(obsluzhivanie);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}
